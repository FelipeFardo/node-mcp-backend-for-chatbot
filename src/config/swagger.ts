import { jsonSchemaTransform } from "fastify-type-provider-zod";
import { env } from "../env.ts";
import { mcpOpenApiPaths } from "./mcp-docs.ts";

export const swaggerConfig = {
	swagger: {
		info: {
			title: "Node MCP Chatbot API",
			description: `
**ü§ñ API RESTful para Chatbot de Renegocia√ß√£o**

API completa constru√≠da com Fastify, JWT, PostgreSQL e integra√ß√£o MCP para chatbots de renegocia√ß√£o de d√≠vidas.

**üöÄ Recursos Principais:**

‚Ä¢ Autentica√ß√£o segura com JWT e API Key
‚Ä¢ Integra√ß√£o Model Context Protocol (MCP)  
‚Ä¢ Gest√£o de usu√°rios e d√≠vidas
‚Ä¢ Documenta√ß√£o interativa com Swagger
‚Ä¢ Performance otimizada com TypeScript

**üîó Links √öteis:**

‚Ä¢ Reposit√≥rio: https://github.com/FelipeFardo/Node-MCP-Backend-for-Chatbot
‚Ä¢ Documenta√ß√£o: /docs
‚Ä¢ MCP Inspector: Execute 'npm run mcp'

**‚ö° In√≠cio R√°pido:**

1. Use POST /auth com API Key para obter JWT
2. Use GET /me com JWT Bearer para dados do usu√°rio  
3. Use POST /mcp para ferramentas MCP

**üí° Dica:** Teste todos os endpoints nesta interface usando "Try it out"
			`,
			version: "1.0.0",
			contact: {
				name: "Felipe Fardo",
				url: "https://github.com/FelipeFardo/Node-MCP-Backend-for-Chatbot",
				email: "felipe.fardo@exemplo.com",
			},
			license: {
				name: "MIT License",
				url: "https://opensource.org/licenses/MIT",
			},
		},
		externalDocs: {
			description: "Leia o README do projeto",
			url: "https://github.com/FelipeFardo/Node-MCP-Backend-for-Chatbot",
		},
		servers: [
			{
				url: "https://node-api-mcp-chatbot.onrender.com",
				description: "Produ√ß√£o",
			},
			{
				url: `http://localhost:${env.PORT}`,
				description: "Desenvolvimento",
			},
		],
		tags: [
			{
				name: "Health",
				description: "ü©∫ Health check e monitoramento do sistema",
			},
			{ name: "Auth", description: "üîê Autentica√ß√£o e gera√ß√£o de tokens JWT" },
			{ name: "Users", description: "üë§ Recursos de usu√°rio e perfil" },
			{
				name: "MCP",
				description:
					"ü§ñ Model Context Protocol - Tools e Resources para chatbots",
			},
		],
		paths: {
			...mcpOpenApiPaths,
		},
		securityDefinitions: {
			apiKey: {
				type: "apiKey",
				name: "apiKey",
				in: "header",
				description: "Chave de API para autentica√ß√£o no endpoint /auth",
			},
			bearerAuth: {
				type: "apiKey",
				name: "Authorization",
				in: "header",
				description:
					"Token JWT para acessar endpoints protegidos (formato: Bearer <token>)",
			},
		},
	},
	transform: jsonSchemaTransform,
};
